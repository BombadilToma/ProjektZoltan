# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.

n = int(input())
player_pool = []

for i in range(n):
    numplayer, signplayer = input().split()
    player = numplayer + signplayer
    player_pool.append(player)
player_pool = tuple(player_pool)
    

players = list(player_pool)

def nr_of_rounds(n):
    for i in range(11):
        if 2**i == n:
            return i

def winner_duel(player1, player2):
    winning_player = ' '

    scissors_win = ['P', 'L']
    scissors_lose = ['S', 'R']
    paper_win = ['R', 'S']
    paper_lose = ['C', 'L']
    rock_win = ['C', 'L']
    rock_lose = ['P', 'S']
    lizard_win = ['S', 'P']
    lizard_lose = ['R', 'C']
    spock_win = ['C', 'R']
    spock_lose = ['P', 'L']

    if player1[-1] == player2[-1]:
        if int(player1[:-1]) < int(player2[:-1]):
            winning_player = player1
        else:
            winning_player = player2

    elif player1[-1] == 'C':
        if player2[-1] in scissors_win:
            winning_player = player1
        elif player2[-1] in scissors_lose:
            winning_player = player2

    elif player1[-1] == 'P':
        if player2[-1] in paper_win:
            winning_player = player1
        elif player2[-1] in paper_lose:
            winning_player = player2

    elif player1[-1] == 'R':
        if player2[-1] in rock_win:
            winning_player = player1
        elif player2[-1] in rock_lose:
            winning_player = player2

    elif player1[-1] == 'L':
        if player2[-1] in lizard_win:
            winning_player = player1
        elif player2[-1] in lizard_lose:
            winning_player = player2

    elif player1[-1] == 'S':
        if player2[-1] in spock_win:
            winning_player = player1
        elif player2[-1] in spock_lose:
            winning_player = player2

    return winning_player
winners = []

for _ in range(nr_of_rounds(n)):
    while len(players) != 0:
        winners.append(winner_duel(players[0], players[1]))
        players.pop(0)
        players.pop(0)
    #print(winners)
    players = winners
    winners = []
tournament_winner = players[0]



players = list(player_pool)
list_of_opponents = []
for f in range(nr_of_rounds(n)):
    while len(players) != 0:
        #if len(players) >= 2:
         k = [players[0],players[1]]
         if tournament_winner in k:
             k.remove(tournament_winner)
             list_of_opponents.extend(k)
         winners.append(winner_duel(players[0], players[1]))
         players.pop(0)
         players.pop(0)
    players = winners
    winners = []


# Write an action using print
# To debug: print("Debug messages...", file=sys.stderr)

print(tournament_winner[:-1])
output_message = ''
for elem in list_of_opponents:
    output_message += elem[:-1] + ' '
print(output_message[:-1])

